I. Calculate the clustering signal-to-noise ratio across 30 runs from k=2 to k=8.

snr = array(0, c(30, 8))
for(k in 2:8){
  for(i in 1:30){
    set.seed(1000*i)
    snrtest = kmeans(cluster, centers=k)
    snr[i, k] = snrtest$betweenss/snrtest$totss
  }
}
colMeans(snr)

II. For the selected value of k (k=5 for all states except k=6 for Michigan),
calculate the clustering signal-to-noise ratio across 10 cross-validation runs.

signal = vector()
k = 5
for(i in 1:30){
  shuffle = cluster[sample(nrow(cluster)), ]
  split = 0.9*dim(shuffle)[1]
  sample = data.frame(shuffle[1:floor(split), ])
  samplek = kmeans(sample, centers=k)
  signal = append(signal, samplek$betweenss/samplek$totss)
}
mean(signal)
sd(signal)

III. Perform the final clustering run with a fixed random seed and check cluster
distinctiveness with pairwise Hotelling t-squared tests.

set.seed(2020)
clustering = kmeans(cluster, centers=k)
colsize = length(names(regress))
regress = cbind(regress, clustering$cluster)
hotelling = array(0, c(5, 5))
for(i in 1:4){
  for(j in (i+1):5){
    clusterA = regress[clustering$cluster == i, 2:colsize]
    clusterB = regress[clustering$cluster == j, 2:colsize]
    test = hotelling.test(clusterA, clusterB)
    hotelling[i, j] = test$pval
  }
}

IV. Append the clustering results and view the cluster centroids.

cluster1 = regress[clustering$cluster == 1, 1:colsize]
cluster2 = regress[clustering$cluster == 2, 1:colsize]
cluster3 = regress[clustering$cluster == 3, 1:colsize]
cluster4 = regress[clustering$cluster == 4, 1:colsize]
cluster5 = regress[clustering$cluster == 5, 1:colsize]
centers = rbind(colMeans(cluster1), colMeans(cluster2),
  colMeans(cluster3), colMeans(cluster4), colMeans(cluster5))
