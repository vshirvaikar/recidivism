### ICPSR Michigan Dataset

I. Read the dataset and pull out usable columns.

reader = file("/Users/vik.shirvaikar/Desktop/Senior Thesis/Data/michigan.txt", open = "r")
input = readLines(reader)
close(reader)
data = matrix(, nrow = 0, ncol = 75)
for(line in input){
  line = strtoi(strsplit(line, split = "")[[1]])
  if(line[54] != 2){
    data = rbind(data, line[1:75])
  }
}
arrests = 10*data[,27] + data[,28]
probations = 10*data[,29] + data[,30]
jailings = 10*data[,31] + data[,32]
juv_priors = data[,34]
adult_priors = data[,36]
gender = data[,23]
  # female = 0 and male = 1
married = 1 - data[,24]
  # unmarried = 0 and married = 1
drugs = ceiling(data[,25]/8)
  # no problem drug use = 0 and any problem drug use = 1
escape = data[,42]
  # no escape attempt = 0 and escape attempt = 1
conduct = ceiling(data[,43]/2)
  # no prison misconduct = 0 and prison misconduct = 1
recid = ceiling((data[,54] - 1)/5)

II. Compose the combined unsupervised (without recidivism) and supervised (with recidivism) datasets.

MIcluster = cbind.data.frame(arrests, probations, jailings, juv_priors, adult_priors,
  gender, married, drugs, escape, conduct)
MIregress = cbind.data.frame(recid, arrests, probations, jailings, juv_priors, adult_priors,
  gender, married, drugs, escape, conduct)

III. For the unsupervised dataset, normalize the numerical variables through division by the maximum value,
and process the categorical variables with target encoding.

MIcluster$arrests = MIcluster$arrests/max(MIcluster$arrests)
MIcluster$probations = MIcluster$probations/max(MIcluster$probations)
MIcluster$jailings = MIcluster$jailings/max(MIcluster$jailings)
MIcluster$juv_priors = MIcluster$juv_priors/max(MIcluster$juv_priors)
MIcluster$adult_priors = MIcluster$adult_priors/max(MIcluster$adult_priors)
MIbte_gender = build_target_encoding(cbind(recid, gender), cols_to_encode = "gender", target_col = "recid")$gender
MIcluster$gender = MIbte_gender$recid_mean_by_gender[match(unlist(MIcluster$gender), MIbte_gender$gender)]
MIbte_married = build_target_encoding(cbind(recid, married), cols_to_encode = "married", target_col = "recid")$married
MIcluster$married = MIbte_married$recid_mean_by_married[match(unlist(MIcluster$married), MIbte_married$married)]
MIbte_drugs = build_target_encoding(cbind(recid, drugs), cols_to_encode = "drugs", target_col = "recid")$drugs
MIcluster$drugs = MIbte_drugs$recid_mean_by_drugs[match(unlist(MIcluster$drugs), MIbte_drugs$drugs)]
MIbte_escape = build_target_encoding(cbind(recid, escape), cols_to_encode = "escape", target_col = "recid")$escape
MIcluster$escape = MIbte_escape$recid_mean_by_escape[match(unlist(MIcluster$escape), MIbte_escape$escape)]
MIbte_conduct = build_target_encoding(cbind(recid, conduct), cols_to_encode = "conduct", target_col = "recid")$conduct
MIcluster$conduct = MIbte_conduct$recid_mean_by_conduct[match(unlist(MIcluster$conduct), MIbte_conduct$conduct)]

cluster = MIcluster
regress = MIregress

MIsignal = array(0, c(30, 8))
for(k in 2:8){
  for(i in 1:30){
    set.seed(1000*i)
    signaltest = kmeans(MIcluster, centers=k)
    MIsignal[i, k] = signaltest$betweenss/signaltest$totss
  }
}
colMeans(MIsignal)

MIsignal6 = vector()
for(i in 1:10){
  shuffle = MIcluster[sample(nrow(MIcluster)), ]
  split = 0.9*dim(shuffle)[1]
  sample = data.frame(shuffle[1:floor(split), ])
  samplek = kmeans(sample, centers=6)
  MIsignal6 = append(MIsignal6, samplek$betweenss/samplek$totss)
}
mean(MIsignal6)
sd(MIsignal6)

set.seed(2020)
MIkmeans6 = kmeans(MIcluster, centers=6)
MIregress = cbind(MIregress, MIkmeans6$cluster)
MIcolsize = length(names(MIregress))-1
MIhotel = array(0, c(6, 6))
for(i in 1:5){
  for(j in (i+1):6){
    clusterA = MIregress[MIkmeans6$cluster == i, 1:MIcolsize]
    clusterB = MIregress[MIkmeans6$cluster == j, 1:MIcolsize]
    test = hotelling.test(clusterA, clusterB)
    MIhotel[i, j] = test$pval
  }
}

MIcluster1 = MIregress[MIkmeans6$cluster == 1, 1:MIcolsize]
MIcluster2 = MIregress[MIkmeans6$cluster == 2, 1:MIcolsize]
MIcluster3 = MIregress[MIkmeans6$cluster == 3, 1:MIcolsize]
MIcluster4 = MIregress[MIkmeans6$cluster == 4, 1:MIcolsize]
MIcluster5 = MIregress[MIkmeans6$cluster == 5, 1:MIcolsize]
MIcluster6 = MIregress[MIkmeans6$cluster == 6, 1:MIcolsize]
MIcenters = rbind(colMeans(MIcluster1), colMeans(MIcluster2), colMeans(MIcluster3),
  colMeans(MIcluster4), colMeans(MIcluster5), colMeans(MIcluster6))

MIlog1 = glm(recid ~ ., family = "binomial", data = MIcluster1)
MIlog2 = glm(recid ~ ., family = "binomial", data = MIcluster2)
MIlog3 = glm(recid ~ ., family = "binomial", data = MIcluster3)
MIlog4 = glm(recid ~ ., family = "binomial", data = MIcluster4)
MIlog5 = glm(recid ~ ., family = "binomial", data = MIcluster5)
MIlog6 = glm(recid ~ ., family = "binomial", data = MIcluster6)
